{"version":3,"sources":["types.ts","App.tsx","lib/api-hooks.ts","reportWebVitals.ts","index.tsx"],"names":["FetchState","App","useState","DEFAULT","fetchState","setFetchState","posts","setPosts","a","LOADING","axios","get","res","resData","data","SUCCESS","ERROR","useGetPosts","getPosts","btnOnClick","className","onClick","map","post","id","title","body","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oMAAYA,E,mGAAAA,K,kBAAAA,E,kBAAAA,E,kBAAAA,E,eAAAA,M,sBCmDGC,MA/Cf,WAAgB,IAAD,ECAR,WAAwB,IAAD,EACQC,mBAASF,EAAWG,SAD5B,mBACrBC,EADqB,KACTC,EADS,OAEFH,mBAA0B,IAFxB,mBAErBI,EAFqB,KAEdC,EAFc,KAiB5B,MAAO,CAACD,EAAOF,EAdD,uCAAG,8BAAAI,EAAA,sEAEbH,EAAcL,EAAWS,SAFZ,SAIKC,IAAMC,IAAI,8CAJf,OAIPC,EAJO,OAKPC,EAAUD,EAAIE,KAEpBP,EAASM,GACTR,EAAcL,EAAWe,SARZ,kDAUbV,EAAcL,EAAWgB,OAVZ,0DAAH,sDDFwBC,GADzB,mBACNX,EADM,KACCF,EADD,KACac,EADb,KAEPC,EAAa,kBAAMD,KAEzB,OACE,sBAAKE,UAAU,YAAf,UACE,4DACChB,IAAeJ,EAAWG,SACzB,qCACE,2GAIA,wBAAQkB,QAASF,EAAjB,0BAGHf,IAAeJ,EAAWS,SAAW,kDACrCL,IAAeJ,EAAWgB,OACzB,qCACE,8EACA,wBAAQK,QAASF,EAAjB,0BAGHf,IAAeJ,EAAWe,SACzB,qCACE,0DACA,oBAAIK,UAAU,aAAd,SACGd,EAAMgB,KAAI,SAACC,GAAD,OACT,qBAAkBH,UAAU,OAA5B,UACE,+BACGG,EAAKC,GADR,MACeD,EAAKE,SAEpB,4BAAIF,EAAKG,SAJFH,EAAKC,YAUtB,wBAAQJ,UAAU,SAAlB,SACE,mBAAGO,KAAK,kHAAR,qFE7BOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f7892285.chunk.js","sourcesContent":["export enum FetchState {\n  DEFAULT = 'DEFAULT',\n  LOADING = 'LOADING',\n  SUCCESS = 'SUCCESS',\n  ERROR = 'ERROR',\n}\n\nexport type PostData = {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n};\n","import { useGetPosts } from './lib/api-hooks';\nimport { FetchState } from './types';\nimport './App.css';\n\nfunction App() {\n  const [posts, fetchState, getPosts] = useGetPosts();\n  const btnOnClick = () => getPosts();\n\n  return (\n    <div className=\"container\">\n      <h1>React TypeScript API hooks</h1>\n      {fetchState === FetchState.DEFAULT && (\n        <>\n          <p>\n            Hello there, click the button below to get the list of posts from\n            the API.\n          </p>\n          <button onClick={btnOnClick}>Get Posts</button>\n        </>\n      )}\n      {fetchState === FetchState.LOADING && <p>Fetching posts...</p>}\n      {fetchState === FetchState.ERROR && (\n        <>\n          <p>Oops! Something went wrong. Please try again.</p>\n          <button onClick={btnOnClick}>Get Posts</button>\n        </>\n      )}\n      {fetchState === FetchState.SUCCESS && (\n        <>\n          <p>Here's the list of posts:</p>\n          <ul className=\"posts-list\">\n            {posts.map((post) => (\n              <li key={post.id} className=\"post\">\n                <h3>\n                  {post.id} - {post.title}\n                </h3>\n                <p>{post.body}</p>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n      <footer className=\"footer\">\n        <a href=\"https://dominicarrojado.com/posts/how-to-integrate-with-a-rest-api-using-react-hooks-and-typescript-with-tests/\">\n          Learn how to do this REST API integration in React and TypeScript\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import axios from 'axios';\nimport { useState } from 'react';\nimport { FetchState, PostData } from '../types';\n\nexport function useGetPosts() {\n  const [fetchState, setFetchState] = useState(FetchState.DEFAULT);\n  const [posts, setPosts] = useState<Array<PostData>>([]);\n  const getPosts = async () => {\n    try {\n      setFetchState(FetchState.LOADING);\n\n      const res = await axios.get('https://jsonplaceholder.typicode.com/posts');\n      const resData = res.data as Array<PostData>;\n\n      setPosts(resData);\n      setFetchState(FetchState.SUCCESS);\n    } catch (err) {\n      setFetchState(FetchState.ERROR);\n    }\n  };\n\n  return [posts, fetchState, getPosts] as const;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}